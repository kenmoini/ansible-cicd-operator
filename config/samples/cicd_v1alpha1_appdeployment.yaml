apiVersion: cicd.kemo.dev/v1alpha1
kind: AppDeployment
metadata:
  labels:
    app.kubernetes.io/name: appdeployment
    app.kubernetes.io/instance: appdeployment-sample
    app.kubernetes.io/part-of: ansible-cicd-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: ansible-cicd-operator
  name: appdeployment-sample
spec:
  # sourceRepository controls the source code repository for the application
  sourceRepository:
    gitRepo:
      # The name/namespace of the GitRepo resource
      name: source-repo
      namespace: cicd-system
    # contextDir is optional - if not defined will default to the root of the repository
    contextDir: convert_models
    # branch can override the branch that is defined in the GitRepo CR
    branch: main
  registry:
    # The name/namespace of the ImageRegistry resource
    name: imageregistry-sample
    namespace: cicd-system
    # path is the path to the image in the registry after the registry URL defined in the ImageRegistry CR targeted Secret's Docker Config JSON
    path: kenmoini
    # imageName is optional - will default to the AppDeployment name
    imageName: cicd-system-apps
  # build defines how the application is built
  build:
    # strategy: docker or kustomize
    strategy: docker
    # dockerfile: path to the dockerfile relative to the context_dir in the sourceRepository
    dockerfile: Containerfile.uisvc
    # deployment_type: Deployment or StatefulSet
    deployment_type: Deployment
  # service will expose any port defined in the Dockerfile
  create_networking:
    # create_networking will create a Service and Route for the application
    service: true
    # route will create a Route for the application
    route: true
    # hostname will set the hostname for the Route - if undefined will use the default wildcard ingress
    #hostname: my-sample-app.com
  # target defines where the built application manifests are pushed to and what clusters they're deployed to
  target:
    cluster:
      # name and labelSelector are mutually exclusive - only one should be defined
      # name must be a cluster name found in ArgoCD/RHACM
      name: local-cluster
      # if a labelSelector is used an ApplicationSet will be generated instead of an Application
      #labelSelector:
      #  matchLabels:
      #    vendor: OpenShift
    # namespace is the namespace to deploy the application to on the target cluster
    namespace: convert-models
    # gitRepo is the name/namespace of the GitRepo resource to push manifests to
    gitRepo:
      # The name/namepsace of the GitRepo resource to push manifests to
      name: gitrepo-sample
      namespace: cicd-system
---
apiVersion: cicd.kemo.dev/v1alpha1
kind: AppDeployment
metadata:
  labels:
    app.kubernetes.io/name: appdeployment
    app.kubernetes.io/instance: three-tier-frontend
    app.kubernetes.io/part-of: ansible-cicd-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: ansible-cicd-operator
  name: three-tier-frontend
spec:
  # sourceRepository controls the source code repository for the application
  sourceRepository:
    gitRepo:
      # The name/namespace of the GitRepo resource
      name: three-tier-source-repo
      namespace: cicd-system
    # contextDir is optional - if not defined will default to the root of the repository
    contextDir: frontend
    # branch can override the branch that is defined in the GitRepo CR
    branch: main
  # registry defines what image registry the built container will be pushed to
  registry:
    # The name/namespace of the ImageRegistry resource
    name: imageregistry-sample
    namespace: cicd-system
    # path is the path to the image in the registry after the registry URL defined in the ImageRegistry CR targeted Secret's Docker Config JSON
    path: kenmoini
    # imageName is optional - will default to the AppDeployment name
    imageName: acicdo-three-tier-frontend
  # build defines how the application is built
  build:
    # strategy: docker or kustomize
    strategy: docker
    # dockerfile: path to the dockerfile relative to the context_dir in the sourceRepository
    dockerfile: Dockerfile
    # deployment_type: Deployment or StatefulSet
    deployment_type: Deployment
    # kustomize allows you to pass extra parameters to the kustomization.yml file that is used to deploy this application
    kustomize:
      patches:
      - patch: |-
          - op: add
            path: "/spec/template/spec/containers/0/env/-"
            value:
              name: REACT_APP_BACKEND_URL
              value: 'https://three-tier-backend-three-tier-backend.apps.mega-sno.v60.lab.kemo.network/api/tasks'
        target:
          kind: Deployment
          namespace: three-tier-frontend
          name: three-tier-frontend
  # create_networking will create a Service and Route for the application
  create_networking:
    # service will expose any port defined in the Dockerfile
    service: true
    # route will create a Route for the application
    route: true
    # hostname will set the hostname for the Route - if undefined will use the default wildcard ingress
    #hostname: my-awesome-app.com
  # target defines where the built application manifests are pushed to and what clusters they're deployed to
  target:
    cluster:
      # name and labelSelector are mutually exclusive - only one should be defined
      # name must be a cluster name found in ArgoCD/RHACM
      name: local-cluster
      # if a labelSelector is used an ApplicationSet will be generated instead of an Application
      #labelSelector:
      #  matchLabels:
      #    vendor: OpenShift
    # namespace is the namespace to deploy the application to on the target cluster
    namespace: three-tier-frontend
    # gitRepo is the name/namespace of the GitRepo resource to push manifests to
    gitRepo:
      # The name/namepsace of the GitRepo resource to push manifests to
      name: gitrepo-sample
      namespace: cicd-system
---
apiVersion: cicd.kemo.dev/v1alpha1
kind: AppDeployment
metadata:
  labels:
    app.kubernetes.io/name: appdeployment
    app.kubernetes.io/instance: three-tier-backend
    app.kubernetes.io/part-of: ansible-cicd-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: ansible-cicd-operator
  name: three-tier-backend
spec:
  # sourceRepository controls the source code repository for the application
  sourceRepository:
    gitRepo:
      # The name/namespace of the GitRepo resource
      name: three-tier-source-repo
      namespace: cicd-system
    # contextDir is optional - if not defined will default to the root of the repository
    contextDir: backend
    # branch can override the branch that is defined in the GitRepo CR
    branch: main
  # registry defines what image registry the built container will be pushed to
  registry:
    # The name/namespace of the ImageRegistry resource
    name: imageregistry-sample
    namespace: cicd-system
    # path is the path to the image in the registry after the registry URL defined in the ImageRegistry CR targeted Secret's Docker Config JSON
    path: kenmoini
    # imageName is optional - will default to the AppDeployment name
    imageName: acicdo-three-tier-backend
  # build defines how the application is built
  build:
    # strategy: docker or kustomize
    strategy: docker
    # dockerfile: path to the dockerfile relative to the context_dir in the sourceRepository
    dockerfile: Dockerfile
    # deployment_type: Deployment or StatefulSet
    deployment_type: StatefulSet
    # kustomize allows you to pass extra parameters to the kustomization.yml file that is used to deploy this application
    kustomize:
      patches:
      - patch: |-
          - op: add
            path: "/spec/template/spec/containers/0/env/-"
            value:
              name: MONGO_CONN_STR
              value: mongodb://mongodb-svc.three-tier-db.svc.cluster.local:27017/todo?directConnection=true
          - op: add
            path: "/spec/template/spec/containers/0/env/-"
            value:
              name: MONGO_USERNAME
              value: admin
          - op: add
            path: "/spec/template/spec/containers/0/env/-"
            value:
              name: MONGO_PASSWORD
              value: admin
        target:
          kind: StatefulSet
          namespace: three-tier-backend
          name: three-tier-backend
  # create_networking will create a Service and Route for the application
  create_networking:
    # service will expose any port defined in the Dockerfile
    service: true
    # route will create a Route for the application
    route: true
    # hostname will set the hostname for the Route - if undefined will use the default wildcard ingress
    #hostname: my-awesome-app.com
  # target defines where the built application manifests are pushed to and what clusters they're deployed to
  target:
    cluster:
      # name and labelSelector are mutually exclusive - only one should be defined
      # name must be a cluster name found in ArgoCD/RHACM
      name: local-cluster
      # if a labelSelector is used an ApplicationSet will be generated instead of an Application
      #labelSelector:
      #  matchLabels:
      #    vendor: OpenShift
    # namespace is the namespace to deploy the application to on the target cluster
    namespace: three-tier-backend
    # gitRepo is the name/namespace of the GitRepo resource to push manifests to
    gitRepo:
      # The name/namepsace of the GitRepo resource to push manifests to
      name: gitrepo-sample
      namespace: cicd-system
---
apiVersion: cicd.kemo.dev/v1alpha1
kind: AppDeployment
metadata:
  labels:
    app.kubernetes.io/name: appdeployment
    app.kubernetes.io/instance: three-tier-db
    app.kubernetes.io/part-of: ansible-cicd-operator
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/created-by: ansible-cicd-operator
  name: three-tier-db
spec:
  # sourceRepository controls the source code repository for the application
  sourceRepository:
    gitRepo:
      # The name/namespace of the GitRepo resource
      name: three-tier-source-repo
      namespace: cicd-system
    # contextDir is optional - if not defined will default to the root of the repository
    contextDir: k8s_manifests/mongo
    # branch can override the branch that is defined in the GitRepo CR
    branch: main
  build:
    # strategy: docker or kustomize
    strategy: kustomize
    # with a kustomize build strategy the sourceRepository is used to pull the manifests and there are no futher configuration parameters
  # target defines where the built application manifests are pushed to and what clusters they're deployed to
  target:
    cluster:
      # name and labelSelector are mutually exclusive - only one should be defined
      # name must be a cluster name found in ArgoCD/RHACM
      #name: local-cluster
      # if a labelSelector is used an ApplicationSet will be generated instead of an Application
      labelSelector:
        matchLabels:
          vendor: OpenShift
    # namespace is the namespace to deploy the application to on the target cluster
    namespace: three-tier-db
    # gitRepo is the name/namespace of the GitRepo resource to push manifests to
    gitRepo:
      # The name/namepsace of the GitRepo resource to push manifests to
      name: gitrepo-sample
      namespace: cicd-system