---
############################################## Git Clone to read Dockerfile
- name: Clone and read data for Docker builds
  when: _cicd_kemo_dev_appdeployment_spec.build.strategy == "docker"
  block: 
    - name: Create a temporary path for the git clone
      ansible.builtin.tempfile:
        state: directory
        suffix: gitclone
      register: temp_gitclone_path

    - name: Create temporary file for the SSH key
      when: (source_gitrepo_info.resources[0].spec.credentials is defined) and (source_gitrepo_secret_info.resources[0].data['id_rsa'] is defined)
      ansible.builtin.tempfile:
        state: file
        suffix: tempkey
      register: tempfile_1

    - name: Write the SSH key to the temporary file
      when: (source_gitrepo_info.resources[0].spec.credentials is defined) and (source_gitrepo_secret_info.resources[0].data['id_rsa'] is defined)
      ansible.builtin.template:
        src: templates/filefiller.j2
        dest: "{{ tempfile_1.path }}"
        mode: '0600'
      vars:
        content: "{{ source_gitrepo_secret_info.resources[0].data['id_rsa'] | b64decode | trim }}"

    - name: Connect to the git repo
      ansible.builtin.git:
        repo: "{{ source_gitrepo_info.resources[0].spec.url }}"
        dest: "{{ temp_gitclone_path.path }}"
        update: no
        clone: yes
        single_branch: yes
        version: "{{ _cicd_kemo_dev_appdeployment_spec.sourceRepository.branch | default(source_gitrepo_info.resources[0].spec.branch) }}"
        key_file: "{{ tempfile_1.path if ((source_gitrepo_info.resources[0].spec.credentials is defined) and (source_gitrepo_secret_info.resources[0].data['id_rsa'] is defined)) else omit }}"
        ssh_opts: "-o StrictHostKeyChecking=no"

    - name: Read in the Dockerfile
      ansible.builtin.slurp:
        src: "{{ temp_gitclone_path.path }}/{{ _cicd_kemo_dev_appdeployment_spec.sourceRepository.contextDir }}/{{ _cicd_kemo_dev_appdeployment_spec.build.dockerfile | default('Dockerfile') }}"
      register: dockerfile_read

    - name: Set fact for detected ports exposed in the dockerfile
      ansible.builtin.set_fact:
        detected_service_ports: "{{ dockerfile_read.content | b64decode | regex_findall('EXPOSE ([0-9]+)') }}"

    - name: Set fact for imageName
      ansible.builtin.set_fact:
        imageName: "{{ _cicd_kemo_dev_appdeployment_spec.registry.imageName | default(ansible_operator_meta.name) }}"

    - name: Set fact for repoTargetJSON - dockerconfigjson
      when: image_registry_secret_info.resources[0].data['.dockerconfigjson'] is defined
      ansible.builtin.set_fact:
        repoTargetJSON: "{{ image_registry_secret_info.resources[0].data['.dockerconfigjson'] | b64decode }}"

    - name: Set fact for repoTargetJSON - dockercfg
      when: image_registry_secret_info.resources[0].data['.dockercfg'] is defined
      ansible.builtin.set_fact:
        repoTargetJSON: "{{ image_registry_secret_info.resources[0].data['.dockercfg'] | b64decode }}"

    - name: Set fact for repoTarget
      ansible.builtin.set_fact:
        repoTarget: "{{ lookup('ansible.builtin.dict', (repoTargetJSON).auths).key }}"

############################################## Create Manifests - General

    - name: Create a temporary path for the manifests
      ansible.builtin.tempfile:
        state: directory
        suffix: manifests
      register: temp_manifests_path

    - name: Set a fact for the manifests
      ansible.builtin.set_fact:
        manifests:
          - kustomization.yml
          - namespace.yml

    - name: Create Manifests for a Deployment strategy
      when: (_cicd_kemo_dev_appdeployment_spec.build.deployment_type | lower) == "deployment"
      block:
        - name: Append the Deployment to the manifests
          ansible.builtin.set_fact:
            manifests: "{{ manifests + ['deployment.yml'] }}"

    - name: Create Manifests for a StatefulSet strategy
      when: (_cicd_kemo_dev_appdeployment_spec.build.deployment_type | lower) == "statefulset"
      block:
        - name: Append the StatefulSet to the manifests
          ansible.builtin.set_fact:
            manifests: "{{ manifests + ['statefulset.yml'] }}"

    - name: Append the Service to the manifests
      when: _cicd_kemo_dev_appdeployment_spec.create_networking.service
      ansible.builtin.set_fact:
        manifests: "{{ manifests + ['service.yml'] }}"

    - name: Append the Route to the manifests
      when: _cicd_kemo_dev_appdeployment_spec.create_networking.route
      ansible.builtin.set_fact:
        manifests: "{{ manifests + ['route.yml'] }}"

    - name: Template the manifests
      ansible.builtin.template:
        src: "templates/{{ item }}.j2"
        dest: "{{ temp_manifests_path.path }}/{{ item }}"
      loop: "{{ manifests }}"

    - name: Create a ConfigMap with all the needed manifests
      kubernetes.core.k8s:
        definition: "{{ lookup('template', 'manifest-configmap.yml.j2') }}"
        state: present

    - name: Pass a successful status if the manifest templating is successful
      operator_sdk.util.k8s_status:
        api_version: cicd.kemo.dev/v1alpha1
        kind: AppDeployment
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
        - type: ManifestsCreated
          status: "True"
          reason: Applied
          message: "The manifests were created in {{ ansible_operator_meta.name }}-manifests in the namepsace {{ ansible_operator_meta.namespace }}"
          lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"

  always:
    - name: Clean up the git clone
      ansible.builtin.file:
        path: "{{ temp_gitclone_path.path }}"
        state: absent

    - name: Clean up the SSH key
      when: (source_gitrepo_info.resources[0].spec.credentials is defined) and (source_gitrepo_secret_info.resources[0].data['id_rsa'] is defined)
      ansible.builtin.file:
        path: "{{ tempfile_1.path }}"
        state: absent

    - name: Clean up the manifests directory
      ansible.builtin.file:
        path: "{{ temp_manifests_path.path }}"
        state: absent

  rescue:
    - name: Pass a failure status if the manifest templating errors
      operator_sdk.util.k8s_status:
        api_version: cicd.kemo.dev/v1alpha1
        kind: AppDeployment
        name: "{{ ansible_operator_meta.name }}"
        namespace: "{{ ansible_operator_meta.namespace }}"
        conditions:
        - type: ManifestsCreated
          status: "False"
          reason: Error
          message: "The deployment manifests were not created in {{ ansible_operator_meta.name }}-manifests in the namepsace {{ ansible_operator_meta.namespace }}"
          lastTransitionTime: "{{ lookup('pipe', 'date --rfc-3339 seconds') }}"
    - ansible.builtin.fail:
        msg: "The deployment manifests were not created in {{ ansible_operator_meta.name }}-manifests in the namepsace {{ ansible_operator_meta.namespace }}"