{% if _cicd_kemo_dev_appdeployment_spec.registry.imageName is defined %}
{% set imageName = _cicd_kemo_dev_appdeployment_spec.registry.imageName %}
{% else %}
{% set imageName = ansible_operator_meta.name %}
{% endif %}

{% if image_registry_secret_info.resources[0].data['.dockerconfigjson'] is defined %}
{% set repoTargetJSON = image_registry_secret_info.resources[0].data['.dockerconfigjson'] | b64decode %}
{% endif %}
{% if image_registry_secret_info.resources[0].data['.dockercfg'] is defined %}
{% set repoTargetJSON = image_registry_secret_info.resources[0].data['.dockercfg'] | b64decode %}
{% endif %}
{% set repoTarget = lookup('ansible.builtin.dict', (repoTargetJSON | from_json).auths).key %}

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    app.kubernetes.io/instance: {{ ansible_operator_meta.name }}
    app.kubernetes.io/name: {{ ansible_operator_meta.name }}
    pipeline.openshift.io/strategy: docker
    pipeline.openshift.io/type: kubernetes
  name: {{ ansible_operator_meta.name }}
  namespace: {{ ansible_operator_meta.namespace }}
spec:
  params:
    - default: {{ ansible_operator_meta.name }}
      name: APP_NAME
      type: string
    - default: '{{ source_gitrepo_info.resources[0].spec.url }}'
      name: GIT_REPO
      type: string
    - default: '{{ source_gitrepo_info.resources[0].spec.branch }}'
      name: GIT_REVISION
      type: string
    - default: '{{ repoTarget }}/{{ _cicd_kemo_dev_appdeployment_spec.registry.path }}/{{ imageName }}'
      name: IMAGE_NAME
      type: string
    - name: IMAGE_TAG
      default: latest
      type: string
    - name: MULTI_IMAGE_TAG
      default: "true"
      type: string
    - default: {{ _cicd_kemo_dev_appdeployment_spec.sourceRepository.contextDir }}
      name: PATH_CONTEXT
      type: string
    - name: DOCKERFILE
      default: {{ _cicd_kemo_dev_appdeployment_spec.build.dockerfile }}
      type: string
    - default: '{{ target_gitrepo_info.resources[0].spec.url }}'
      name: TARGET_GIT_REPO
      type: string
    - default: '{{ target_gitrepo_info.resources[0].spec.branch }}'
      name: TARGET_GIT_REVISION
      type: string
    - name: GIT_USER_EMAIL
      default: cicd-system@kemo.dev
      type: string
    - name: GIT_USER_NAME
      default: CICDSystemBot
      type: string
  tasks:
    - name: fetch-repository
      params:
        - name: url
          value: $(params.GIT_REPO)
        - name: revision
          value: $(params.GIT_REVISION)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: workspace
    - name: build
      params:
        - name: IMAGE
          value: $(params.IMAGE_NAME)
        - name: IMAGE_TAG
          value: $(params.IMAGE_TAG)
        - name: MULTI_IMAGE_TAG
          value: $(params.MULTI_IMAGE_TAG)
        - name: TLSVERIFY
          value: 'false'
        - name: CONTEXT
          value: $(params.PATH_CONTEXT)
        - name: DOCKERFILE
          value: $(params.DOCKERFILE)
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        #name: buildah
        name: buildah-multi-tag
      workspaces:
        - name: source
          workspace: workspace
        - name: dockerconfig
          workspace: dockerconfig
    - name: push-manifests
      runAfter:
        - build
      taskRef:
        kind: ClusterTask
        name: git-cli
      params:
        - name: GIT_USER_EMAIL
          value: $(params.GIT_USER_EMAIL)
        - name: GIT_USER_NAME
          value: $(params.GIT_USER_NAME)
        - name: APP_NAME
          value: $(params.APP_NAME)
        - name: TARGET_GIT_REVISION
          value: $(params.TARGET_GIT_REVISION)
        - name: TARGET_GIT_REPO
          value: $(params.TARGET_GIT_REPO)
        - name: PARAM_VERBOSE
          value: "true"
        - name: GIT_SCRIPT
          value: |
            echo "" >> ${PARAM_USER_HOME}/.ssh/id_rsa
            GIT_SSH_COMMAND="ssh -i ${PARAM_USER_HOME}/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git clone -b $(params.TARGET_GIT_REVISION) --single-branch $(params.TARGET_GIT_REPO)
            repourl=$(params.TARGET_GIT_REPO)
            reponame=$(echo $repourl | rev | cut -d '/' -f 1 | rev | sed -e 's/.git//')
            cd ${reponame}
            mkdir -p argocd-apps/$(params.APP_NAME)
            cd argocd-apps/$(params.APP_NAME)
            cp $(workspaces.input.path)/* .
            git add . || true
            git commit -m "update with $(params.APP_NAME) manifests" || true
            GIT_SSH_COMMAND="ssh -i ${PARAM_USER_HOME}/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" git push || true
      workspaces:
        - name: source
          workspace: workspace
        - name: input
          workspace: manifests
        - name: ssh-directory
          workspace: sshconfig
  workspaces:
    - name: workspace
    - name: dockerconfig
      optional: true
    - name: target
      optional: true
    - name: manifests
      optional: true
    - name: sshconfig
      optional: true
